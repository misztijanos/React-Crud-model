{"ast":null,"code":"var _jsxFileName = \"E:\\\\Active (work)\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      console.log(editStream);\n      this.props.editStream(this.props.stream.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"Loading...\");\n    } //because of Redux Forms magic\n    //onSubmit will be called with the object we pass into initialValues\n    // in this case {$title, $description}\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Edit a Stream\"), React.createElement(StreamForm, {\n      initialValues: _.pick(this.props.stream, \"title\", \"description\"),\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["E:/Active (work)/streams/client/src/components/streams/StreamEdit.js"],"names":["_","React","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","onSubmit","formValues","console","log","props","stream","id","componentDidMount","match","params","render","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAKvCC,QALuC,GAK5BC,UAAU,IAAI;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACA,WAAKQ,KAAL,CAAWR,UAAX,CAAsB,KAAKQ,KAAL,CAAWC,MAAX,CAAkBC,EAAxC,EAA4CL,UAA5C;AACD,KARsC;AAAA;;AACvCM,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,KAAL,CAAWT,WAAX,CAAuB,KAAKS,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBH,EAA/C;AACD;;AAODI,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKN,KAAL,CAAWC,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAHM,CAIP;AACA;AACA;;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,UAAD;AACE,MAAA,aAAa,EAAEb,CAAC,CAACmB,IAAF,CAAO,KAAKP,KAAL,CAAWC,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC,CADjB;AAEE,MAAA,QAAQ,EAAE,KAAKL,QAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AASD;;AA1BsC;;AA6BzC,MAAMY,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAET,IAAAA,MAAM,EAAEQ,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACN,KAAT,CAAeC,MAAf,CAAsBH,EAApC;AAAV,GAAP;AACD,CAFD;;AAIA,eAAeZ,OAAO,CAACkB,eAAD,EAAkB;AAAEjB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAlB,CAAP,CACbE,UADa,CAAf","sourcesContent":["import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream, editStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\n\r\nclass StreamEdit extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n\r\n  onSubmit = formValues => {\r\n    console.log(editStream);\r\n    this.props.editStream(this.props.stream.id, formValues);\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    //because of Redux Forms magic\r\n    //onSubmit will be called with the object we pass into initialValues\r\n    // in this case {$title, $description}\r\n    return (\r\n      <div>\r\n        <h3>Edit a Stream</h3>\r\n        <StreamForm\r\n          initialValues={_.pick(this.props.stream, \"title\", \"description\")}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchStream, editStream })(\r\n  StreamEdit\r\n);\r\n"]},"metadata":{},"sourceType":"module"}